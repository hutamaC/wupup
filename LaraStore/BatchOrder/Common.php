<?php

namespace LaraStore\BatchOrder;

class Common{

	protected $str;
	protected $order;
    protected $order_no = 0;
	/*
    |-------------------------------------------------------------------------------
    |
    | 处理批量下单的类
    |
    |-------------------------------------------------------------------------------
    */
    public function __construct($str){

    	
    	$this->str 	= $str;
    }



    /*
    |-------------------------------------------------------------------------------
    |
    | 把多个订单拆分开来  转化成订单字符串数组
    |
    |-------------------------------------------------------------------------------
    */
    public function  order(){

         $this->str     = trim($this->str);
    	//多个订单之间以#号区分拆开,拆分结果为数组
    	return preg_split("/[\#]+/", $this->str);

    }


    /*
    |-------------------------------------------------------------------------------
    |
    | 把订单字符串进一步转化成数组
    |
    |-------------------------------------------------------------------------------
    */
    public function toOrder(){

    	return collect($this->order())->map(function($item,$key){
               //订单中，把字符串通过换行符号拆分成数组
    		   $arr = preg_split('/\n|\r\n?/', trim($item));
               return ['order'=>$arr];

    	});
    }


    /*
    |-------------------------------------------------------------------------------
    |
    | 把数据进一步转化 每条数据之间用空格隔开 转化成数组
    |
    |-------------------------------------------------------------------------------
    */
    public function toArray(){

        return collect($this->toOrder())->map(function($item,$key){
               
               return collect($item['order'])->map(function($item2,$key2){

                        //把字符串通过空格拆分新的数组
                        return preg_split("/[\s,]+/", $item2);
               });
               
        });
    }


    /*
    |-------------------------------------------------------------------------------
    |
    | 把数据进一步转化 转化成语义化的关联数组
    |
    |-------------------------------------------------------------------------------
    */
    public function makeToArray(){

        return new ArrayCommon($this->toArray());
    }


    




    /*
    |-------------------------------------------------------------------------------
    |
    | 数据是否为空
    |
    |-------------------------------------------------------------------------------
    */
    public function isEmpty(){

         return (count($this->toArray()) > 0)? false:true;
    }


    /*
    |-------------------------------------------------------------------------------
    |
    | 每个订单数据是否同时拥有商品和收货地址信息
    |
    |-------------------------------------------------------------------------------
    */
    public function hasGoodsAndAddress(){

        foreach($this->toArray() as $key=>$value){

            if(count($value) <= 1){
                $this->order_no  = $key;
                return false;
            }
        }

        return true;
    }


    /*
    |-------------------------------------------------------------------------------
    |
    | 每个订单数据中的地址信息是否完整
    |
    |-------------------------------------------------------------------------------
    */
    public function isAddress(){

        foreach($this->toArray() as $key=>$value){

            //获取订单中的数据
            $len  = count($value);
            //获取地址数组
            $address  = $value[$len - 1];
            //如果地址信息不完整
            if(count($address) != 3){
                $this->order_no  = $key;
                return false;
            }
        }

        return true;
    }



    /*
    |-------------------------------------------------------------------------------
    |
    | 获取对象属性值
    |
    |-------------------------------------------------------------------------------
    */
    public function get($key){

        return $this->$key;
    }


    /*
    |-------------------------------------------------------------------------------
    |
    | 获取出错订单编号
    |
    |-------------------------------------------------------------------------------
    */
    public function errorOrderNo(){

        $num  = intval($this->order_no) + 1;

        return '<strong style="color:red">'.$num.'</strong>';
    }


    /*
    |-------------------------------------------------------------------------------
    |
    | 获取错误信息
    |
    |-------------------------------------------------------------------------------
    */
    public function goodsAndAddressError(){

        return '订单中商品和收货地址必须完整，错误订单编号是：'.$this->errorOrderNo();
    }


    /*
    |-------------------------------------------------------------------------------
    |
    | 地址信息错误
    |
    |-------------------------------------------------------------------------------
    */
    public function addressError(){

        return '订单地址信息错误,错误订单编号：'.$this->errorOrderNo();
    }


}