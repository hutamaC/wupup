<?php

namespace LaraStore\Forms\Order;

use App\Http\Controllers\Api\ApiController as Api;
use App\User;
use Auth;
use App\Models\Order;
use LaraStore\Forms\Form;

class MergeForm extends Form{

	public $api;
	/*
    |-------------------------------------------------------------------------------
    |
    | 注册表单验证规则
    |
    |-------------------------------------------------------------------------------
    */
    protected $rules = [

        
    ];


    /*
    |-------------------------------------------------------------------------------
    |
    | 注册表单验证规则提示信息
    |
    |-------------------------------------------------------------------------------
    */
    protected $messages = [
       	
    ];


    /*
    |-------------------------------------------------------------------------------
    |
    | 构造函数
    |
    |-------------------------------------------------------------------------------
    */
    public function __construct(Api $api){
       $this->api       = $api;
    }


    /*
    |-------------------------------------------------------------------------------
    |
    |  验证用户是否登录
    |
    |-------------------------------------------------------------------------------
    */
    public function auth(){

    	return (Auth::check('user'))? true:false;
    }


    /*
    |-------------------------------------------------------------------------------
    |
    |  获取订单数组
    |
    |-------------------------------------------------------------------------------
    */
    public function attributes(){

    	return  json_decode($this->ids);
    }


    /*
    |-------------------------------------------------------------------------------
    |
    |  子订单中有已经支付的订单
    |
    |-------------------------------------------------------------------------------
    */
    public function hasPayed(){

    	 $ids 					= $this->attributes();
    	 foreach($ids as $id){

    	 		$model 			= Order::find($id);

    	 		if($model->pay_status == 1){
    	 			return true;
    	 		}
    	 }

    	 return false;
    }



    /*
    |-------------------------------------------------------------------------------
    |
    |  子订单是否存在
    |
    |-------------------------------------------------------------------------------
    */
    public function hasOrder(){

    	$ids 		= $this->attributes();
    	return (count($ids) == 0)? false :true;
    }


    /*
    |-------------------------------------------------------------------------------
    |
    |  检测错误信息
    |
    |-------------------------------------------------------------------------------
    */
    public function isValid(){

    	return  ($this->hasOrder() && $this->auth() && (!$this->hasPayed()))? true : false;
    }




    /*
    |-------------------------------------------------------------------------------
    |
    |  成功后返回
    |
    |-------------------------------------------------------------------------------
    */
    public function successRespond(){

    	$tag 		    = 'success';
    	$info 		    = '成功合并订单';
        $user           = Auth::user('user');
        //合并订单
        $order 			= $this->mergeOrder();
        $order_list     = $user->order()->orderBy('id','desc')->get();
    	return $this->api->respond(['data'=>compact('tag','info','order_list','order')]);
    	
    }


    /*
    |-------------------------------------------------------------------------------
    |
    |  合并订单
    |
    |-------------------------------------------------------------------------------
    */
    public function mergeOrder(){

    	$ids 		= $this->attributes();
    	//合并订单
    	return Order::mergeOrder($ids);
    }


    /*
    |-------------------------------------------------------------------------------
    |
    |  验证未通过返回错误信息
    |
    |-------------------------------------------------------------------------------
    */
    public function errorRespond(){

    	if(!$this->auth()){
            $info               = '用户未登录';
    		return $this->api->respondCommonError($info);
    	}
    	
    	if(!$this->hasOrder()){
            $info               = '没有选中任何订单';
    		return $this->api->respondCommonError($info);
    	}

    	if($this->hasPayed()){
            $info               = '选中的订单中有已支付订单';
    		return $this->api->respondCommonError($info);
    	}
    }



    /*
    |-------------------------------------------------------------------------------
    |
    | 存储注册表单中的数据到数据库
    |
    |-------------------------------------------------------------------------------
    */
    public function persist()
    {
         return true;
    }
}